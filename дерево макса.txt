//template <typename T>
//class BinaryTree {
//private:
//	struct Node {
//		T data;
//		Node* left;
//		Node* right;
//
//		Node(const T& value) : data(value), left(nullptr), right(nullptr) {}
//	};
//
//	Node* root;
//
//	void insertRecursive(Node* currentNode, const T& value) {
//		if (value < currentNode->data) {
//			if (currentNode->left == nullptr) {
//				currentNode->left = new Node(value);
//			}
//			else {
//				insertRecursive(currentNode->left, value);
//			}
//		}
//		else {
//			if (currentNode->right == nullptr) {
//				currentNode->right = new Node(value);
//			}
//			else {
//				insertRecursive(currentNode->right, value);
//			}
//		}
//	}
//
//	void printInOrderRecursive(Node* currentNode) {
//		if (currentNode != nullptr) {
//			printInOrderRecursive(currentNode->left);
//			std::cout << currentNode->data;
//			printInOrderRecursive(currentNode->right);
//		}
//	}
//
//public:
//	BinaryTree() : root(nullptr) {}
//
//	void insert(const T& value) {
//		if (root == nullptr) {
//			root = new Node(value);
//		}
//		else {
//			insertRecursive(root, value);
//		}
//	}
//
//	void printInOrder() {
//		printInOrderRecursive(root);
//	}
//
//};