#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <cstdlib>
using namespace std;

class Tree {
private:
	class Node {
	private:
		string _nick;
		string _password;
		string _role;
		Node* left;
		Node* right;
	public:
		Node() : _nick{ "unknown" }, _password{ "unknown" }, _role{ "unknown" }, left{ nullptr }, right{ nullptr } {}
		Node(string name, string pass, string role) {
			this->_nick = name;
			this->_password = pass;
			this->_role = role;
		}
		void Insert(string name, string pass, string role) {
			if (name > _nick && right)
				right->Insert(name, pass, role);
			else if (name > _nick && !right)
				right = new Node(name, pass, role);
			else if (name < _nick && left)
				left->Insert(name, pass, role);
			else if (name < _nick && !left)
				left = new Node(name, pass, role);
			else {
				cout << "ERROR" << endl;
				return;
			}
		}

		void PrintTree() {
			if (left) left->PrintTree();
			cout << _nick << "\t" << _password << endl;
			if (right) right->PrintTree();
		}

		bool IsExist(string name, string pass, string role) {
			static bool isEx = false;
			if (left) left->IsExist(name, pass, role);

			if (this->_nick == name && this->_password == pass && this->_role == role)
				isEx = true;

			if (right) right->IsExist(name, pass, role);
			return isEx;
		}
	};
	Node* root;
public:
	Tree() :root{ nullptr } {};
	void PrintTree() {
		root->PrintTree();
	}
	void Insert(string name, string pass, string role) {
		if (!root) root = new Node(name, pass, role);
		else root->Insert(name, pass, role);
	}
	bool IsExist(string name, string pass, string role) {
		if (!root) return false;
		else
		{
			if (root->IsExist(name, pass, role))
				return true;
			else
				return false;
		}
	}
};